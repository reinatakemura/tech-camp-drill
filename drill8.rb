下記のコードは、ターミナルに「Mr.Tanaka」と表記されることを意図して
書いていますが、実際はそうなりません。

その理由を、「スコープ」という用語を用いて説明してください。
  def rename(name)
    name = "Mr.#{name}"
  end

  name = "Tanaka"
  rename(name)
  puts name

# rubyにはスコープという変数の有効範囲が決まっている。
# 上記では、nameという変数がメソッドの外と中で同名のものが
# それぞれ存在している。
# 7行目で呼び出しているのは、メソッドの外でnameに代入した"Tanaka"であり、
# renameメソッドで定義したローカル変数は呼び出せていない。
# そのため、7行目にて"Tanaka"と表示されてしまう。

・多くのプログラミング言語には変数のスコープという概念があり、スコープ外の変数にはアクセスできない。

・Rubyの場合はメソッドの内側と外側ではスコープが違うという仕様になっている。

・そのためdefの中のnameという変数と、defの外側のnameは別物である。そのためrenameメソッドのなかのnameに代入しても、外側のnameに変更はない。


コードを下記のように修正するとうまくいく理由を、「引数」「返り値」という用語を用いて説明してください。
  def rename(name)
    name = "Mr.#{name}"
  end

  name = "Tanaka"
  name = rename(name)
  puts name

# メソッドの外で、nameの引数を代入し、
# renameメソッドにnameを代入した返り値をnameに再代入している。
# その結果、7行目で表示される結果が求めているものになる。

・問題１で見たようにメソッドを作っても、メソッド外の変数に影響を及ぼすことは（通常）できない。

・そのため、メソッドに引数を渡し、演算の結果を返り値として受け取る。その返り値を再度変数に代入することによって、メソッドでの処理結果を利用することができる。
